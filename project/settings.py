'''-----------------------------------------------------------------------------------------
    Django settings for project.

    Generated by 'django-admin startproject' using Django 3.0.5.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.0/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.0/ref/settings/
-----------------------------------------------------------------------------------------'''

import os, sys, glob
from django.urls import path, include

sys.path.append(os.path.expanduser("~/.django") )

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pr75j7t*r!j=oac!798tazlecdo0%k0rasre@!f_&0u%2(=nty'

if (os.path.exists(os.path.expanduser("~/.django/my_config.py"))):
    import my_config
    from my_config import *


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*', 'localhost']

AUTO_LOGOUT_DELAY=3000000
# Application definition

ACCOUNT_AUTHENTICATION_METHOD="username_email"

ACCOUNT_USERNAME_REQUIRED=False
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS=7
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT=86400000000
#ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX="LearnDjago email: "
ACCOUNT_DEFAULT_HTTP_PROTOCOL="https"

AUTHENTICATION_BACKENDS = [
    #'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend'
]

#CRISPY_TEMPLATE_PACK="bootstrap4"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    #'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    ## => MY APPLICATIONS 
    'django_extensions',
    'project',
 ]  

# -----------------------------------------------------------------------------------------
# Following code looks through exisiting directory and finds directories with apps.py
# If the apps are not already added, it will add them to become as a part of the project
# This will make it easier to just to create the applications without having to modify the settings file
#
# NOTE: you will see multiple invocations of this because it is called once for each thread

DETECT_INSTALLED_APPS = True
DETECTED_APPS = []
DETECTED_URLS = []               # Will be appended to urls later

def detectInstalledApps(appslist):
    global DETECTED_URLS

    print ("++ Searching for installed APPS ...", len(DETECTED_APPS), " PID:", os.getpid())
    appmenu = ""
    for file in glob.glob("**/apps.py"):
        app = os.path.basename(os.path.dirname(file))
        if app in appslist:
            continue

        print("FOUND **", file, app)
        DETECTED_APPS.append(app) 
        
        appmenu += f'''
        <a class="dropdown-item" href="/{app}/{app}/index.html" > {app} </a>\n '''
        
    DETECTED_URLS = [ path(f'{a}/', include(f'{a}.urls'), name=a) for a in DETECTED_APPS ]
    
    with open("apps/templates/appmenu.html", "w+" ) as f:
        f.write(appmenu)
    
    print (f"-- Detected {len(DETECTED_APPS)} apps: {DETECTED_APPS}")
    return DETECTED_APPS;

if ( DETECT_INSTALLED_APPS ):
    detectInstalledApps(INSTALLED_APPS)
# -----------------------------------------------------------------------------------------
INSTALLED_APPS = INSTALLED_APPS + DETECTED_APPS 

SITE_ID = 1

# Provider specific settings
DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'
CORS_ORIGIN_ALLOW_ALL = True   

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'project.urls'
#---------------------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')] + [os.path.join(BASE_DIR, 'apps', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.settings.appcontext'
            ],
        },
    },
]
WSGI_APPLICATION = 'project.wsgi.application'

def SQLLITE3DB():
    optdb= "db.sqlite3"
    
    if not os.path.exists(optdb):
        optdb = os.path.join(BASE_DIR, 'db.sqlite3')
    
    return optdb
        
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME': SQLLITE3DB(),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
#    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SESSION_SAVE_EVERY_REQUEST = True

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N  = True
USE_L10N  = True
USE_TZ    = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), "/")
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

EXP_MEDIA_URL = '/media/'
EXP_MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
EXP_CART_SESSION_ID = 'cart'
EXP_SESSION = {}

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'