"""
Django settings for aimdb project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pr75j7t*r!j=oac!798tazlecdo0%k0rasre@!f_&0u%2(=nty'

DEFAULT_DOMAIN = "https://www.geospaces.org"

import os, sys, glob
from django.urls import path, include

sys.path.append(os.path.expanduser("~/.django") )
if (os.path.exists(os.path.expanduser("~/.django/my_config.py"))):
    import my_config
    from my_config import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*', 'localhost']

AUTO_LOGOUT_DELAY=30000
# Application definition

ACCOUNT_AUTHENTICATION_METHOD="username_email"

ACCOUNT_USERNAME_REQUIRED=False
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS=7
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT=86400000000
#ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX="Geospaces: "
ACCOUNT_DEFAULT_HTTP_PROTOCOL="https"

STRIPE_PUBLIC = my_config.STRIPE_PUBLIC
STRIPE_SECRET = my_config.STRIPE_SECRET


X_FRAME_OPTIONS = 'SAMEORIGIN'
XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']


import logging
from django.utils.log import DEFAULT_LOGGING

# Disable Django's logging setup
LOGGING_CONFIG = None

LOGLEVEL = os.environ.get('LOGLEVEL', 'INFO').upper()

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '%(levelname)s:%(name)s %(asctime)-12s %(filename)s:%(lineno)s:%(funcName)s: %(message)s',
        },
        #'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        # console logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "/tmp/geoapp.log",
        },
        #'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # default for all undefined Python modules
        '': {
            'level': LOGLEVEL,
            'handlers': [], # ['console'],
            'propagate': False,
        },
        '.': {
            'level': LOGLEVEL,
            'handlers': ['console'],
            'propagate': False,
        },
        'app': {
            'level': LOGLEVEL,
            'handlers': ['console'],
            'propagate': False,
        },
        # Our application code
        'geoapp': {
            'level': LOGLEVEL,
            'handlers': ['console', 'file'  ],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        'django.server': {
            'level': 'WARNING',
            'handlers': ['console'  ],
            'propagate': False,
        },
        'uvicorn': {
            'level': 'WARNING',
            'handlers': ['console'  ],
            'propagate': False,
        }
        # Default runserver request logging
        #'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})
#------------------------------------------------------------------------------
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
    
import logging
logging.basicConfig( level=logging.INFO,
        format='%(levelname)s:%(name)s %(asctime)s %(filename)s:%(lineno)s:%(funcName)s: %(message)s',
        handlers=[ logging.FileHandler("/tmp/geoapp.log"), logging.StreamHandler()],
        #handlers=[ logging.StreamHandler()],
)
logger = logging.getLogger("app")

LOGLEVELS = os.environ.get('LOGLEVELS', '')
logger.info(f'''
    Reading environment $LOGLEVELS : you can set it with semicolon seperated
    ex: app.mango=DEBUG:app.tseries=WARNING;
    FOUND=>: {LOGLEVELS}''')
for l in LOGLEVELS.split(":"):
    nv = l.split("=")

    if ( len(nv) !=2):
        continue
    n, v = nv
    gl = logging.getLogger(n)
    gl.setLevel(v.upper())

AUTHENTICATION_BACKENDS = [
    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend'
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    # 'corsheaders',
    'allauth',
    'allauth.account',
    #'allauth.socialaccount.providers.google',
    'allauth.socialaccount',
    #'allauth.socialaccount.providers.github',
    # MY_APPLICATIONS
    'django_extensions',
    'example_app',
    'geoapp',
    'users',
 ]  

DETECT_INSTALLED_APPS = True
DETECTED_APPS = []
DETECTED_URLS = []

def detectInstalledApps(appslist):
    global DETECTED_URLS

    logger.info (f"++ Searching for APPS ... {len(DETECTED_APPS)} PID {os.getpid()}")
    appmenu = ""
    for file in glob.glob("**/apps.py"):
        app = os.path.basename(os.path.dirname(file))
        if app in appslist:
            continue

        logger.info("FOUND ** {file} {app}")
        DETECTED_APPS.append(app) 
        
        index_template = f'{app}/templates/{app}/index.html'
        if ( not os.path.exists(index_template) ):
            index_template = f'{app}/templates/index.html'
        if ( not os.path.exists(index_template) ):
            index_template = f'{app}/templates/{app}.html'
        if ( not os.path.exists(index_template) ):
            index_template = f'{app}/templates/secured/{app}/index.html'
        if ( not os.path.exists(index_template) ):
            index_template = f'{app}/{app}/'

        # ADD ONLY IF INDEX TEMPLATE EXISTS - OTHERWISE IT IS NOT A WEB APP
        if ( os.path.exists(index_template) ):
            index = index_template.replace("/templates/", "/")
            appmenu += f'''<a class="dropdown-item" href="/{index}" > {app} </a>\n '''

    logger.debug(f"-======>DETECTED:  {DETECTED_APPS}")
    if ( len(DETECTED_APPS) > 0): 
        DETECTED_URLS = [ path(f'{a}/', include(f'{a}.urls'), name=a) for a in DETECTED_APPS ]
        
        with open("apps/templates/appmenu.html", "w+" ) as f:
            f.write(appmenu)
        
        logger.debug (f"-- Detected {len(DETECTED_APPS)} apps: {DETECTED_APPS}")
    return DETECTED_APPS;

if ( DETECT_INSTALLED_APPS ):
    detectInstalledApps(INSTALLED_APPS)
# -----------------------------------------------------------------------------------------
INSTALLED_APPS = INSTALLED_APPS + DETECTED_APPS 

logger.info(f"-======>INSTALLED_APPS:  {INSTALLED_APPS}")
SITE_ID = 1

# Provider specific settings
DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'
CORS_ORIGIN_ALLOW_ALL = True   

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'geoapp.urls'
#---------------------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')] + [os.path.join(BASE_DIR, 'apps', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.settings.appcontext'
            ],
        },
    },
]
WSGI_APPLICATION = 'geoapp.wsgi.application'
ASGI_APPLICATION = 'geoapp.asgi.application'

def SQLLITE3DB():
    optdb= "/opt/data/geoapp/db/db.sqlite3"
    optdb= "/opt/utils/db.sqlite3"
    
    if not os.path.exists(optdb):
        optdb = os.path.join(BASE_DIR, 'db.sqlite3')
    
    return optdb
        

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME': SQLLITE3DB(),
    }
}
DB_CNX = DATABASES['default']['NAME']
DB_CNX = DB_CNX.replace("/", "//")
DB_CNX = f"sqllite://${DB_CNX}"



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
#    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
#    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SESSION_SAVE_EVERY_REQUEST = True

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N  = True
USE_L10N  = True
USE_TZ    = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_INSTALL_DIRS = [ f'{BASE_DIR}/{c}/static/'  for c in DETECTED_APPS 
                            if os.path.exists(f'{BASE_DIR}/{c}/static/') ]

STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static'), "/" ] + STATIC_INSTALL_DIRS
logger.debug (f"STATICFILES_DIRS: {STATICFILES_DIRS}")

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

EXP_MEDIA_URL = '/media/'
EXP_MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
EXP_CART_SESSION_ID = 'cart'
EXP_SESSION = {}

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

INSTALLED_APPS += ['channels']
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
